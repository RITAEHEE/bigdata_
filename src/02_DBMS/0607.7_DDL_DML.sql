-- [VII] DDL, DML, DCL
-- SQL = DDL(테이블 생성, 테이블삭제, 테이블구조변경, 테이블 모든 데이터 제거) +
--       DML(SELECT, INSERT, UPDATE, DELETE) +
--       DCL(사용자계정생성, 사용자에게권한부여, 권한박탈, 사용자계정삭제, 트랜젝션명령어)
-- ★ ★ DDL ★ ★ --
-- 1. 테이블 생성(CREATE TABLE)
CREATE TABLE BOOK (
  BOOKID NUMBER(4),      -- 도서번호 BOOKID 필드의 타입은 숫자4자리
  BOOKNAME VARCHAR2(20), -- 도서이름 BOOKNAME필드의 타입은 문자 20BYTE
  PUBLISHER VARCHAR2(20),-- 출판사
  RDATE     DATE,        -- 출판일 RADATE 필드의 타입은 DATE형
  PRICE     NUMBER(8),   -- 가격
  PRIMARY KEY(BOOKID) ); -- 테이블 내 주키(PRIMARY KEY) 설정(유일, NOT NULL)
SELECT * FROM BOOK;
DROP TABLE BOOK; -- 테이블 삭제
CREATE TABLE BOOK (
  BOOKID NUMBER(4) PRIMARY KEY, -- PRIMARY KEY(제약조건)
  BOOKNAME VARCHAR2(100),
  PUBLISHER VARCHAR2(20),
  RDATE DATE,
  PRICE NUMBER(8)
);
SELECT * FROM BOOK;
-- EMP와 유사한 EMP01 : EMPNO(숫자4), ENAME(문자20), SAL(숫자7,2)
CREATE TABLE EMP01(
  EMPNO NUMBER(4),
  ENAME VARCHAR2(20),
  SAL   NUMBER(7,2)  -- SAL은 전체 7자리(소수점 앞5자리, 소수점뒤2자리.소수점은자리수미포함)
);
SELECT * FROM EMP01;
-- DEPT와 유사한 DEPT01 : DEPTNO(숫자2, PK), DNAME(문자14), LOC(문자13)
CREATE TABLE DEPT01(
  DEPTNO NUMBER(2) PRIMARY KEY,
  DNAME  VARCHAR2(14),
  LOC    VARCHAR2(13)
);
SELECT * FROM DEPT01;
-- 서브쿼리를 이용한 테이블 생성
CREATE TABLE EMP02
  AS
  SELECT * FROM EMP; -- 서브쿼리 결과만 EMP02 테이블생성후 들어가(제약조건은 미포함)
SELECT * FROM EMP02;
-- PRIMARY KEY 제약조건 미포함
DESC EMP02; 
-- EMP03 : EMP테이블에서 EMPNO, ENAME, DEPTNO만 추출한 데이터
CREATE TABLE EMP03 AS SELECT EMPNO, ENAME, DEPTNO FROM EMP;
-- EMP04 : EMP테이블에서 10번 부서만 추출
CREATE TABLE EMP04
  AS
  SELECT * FROM EMP WHERE DEPTNO=10;
SELECT * FROM EMP04;
-- EMP05 : EMP테이블의 구조만 추출
CREATE TABLE EMP05
  AS 
  SELECT * FROM EMP WHERE 1=0;
SELECT * FROM EMP05;
DESC EMP05
-- 
SELECT * FROM EMP;
SELECT ROWNUM, EMPNO, ENAME FROM EMP; -- ROWNUM : 테이블에서 행의 논리적 순서(읽어들인 순서)
SELECT ROWID, EMPNO, ENAME FROM EMP; -- ROWID : 행의 논리적 주소

-- 2. 테이블 구조변경(ALTER TABLE)
-- ALTER TABLE 테이블명 ADD || MODIFY || DROP ~
-- (1) 필드 추가(ADD)
SELECT * FROM EMP03; -- EMPNO(수) ENAME(문) DEPTNO(수)
ALTER TABLE EMP03 ADD (JOB VARCHAR2(20), SAL NUMBER(7,2));
SELECT * FROM EMP03; -- 필드 추가시 데이터는 NULL로 
ALTER TABLE EMP03 ADD (COMM NUMBER(7,2));
-- (2) 필드 타입 수정 (MODIFY)
SELECT * FROM EMP03; -- EMPNO(수) ENAME(문10) DEPTNO(수), JOB과SAL과COMM데이터가 NULL
ALTER TABLE EMP03 MODIFY (EMPNO VARCHAR2(5)); -- 숫자데이터가 들어있어서 숫자로만 변경
DESC EMP03; -- ENAME 문자10BYTE
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(20));
DESC EMP03;-- ENAME 문자 20BYTE로 변경됨
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(8)); -- 가능
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(5)); -- 불가능
SELECT MAX(LENGTH(ENAME)) FROM EMP; -- 제일 긴 이름의 BYTE 수 : 6
ALTER TABLE EMP03 MODIFY (JOB VARCHAR2(3)); -- NULL이면 다 바꿔
ALTER TABLE EMP03 MODIFY (JOB NUMBER(4));
ALTER TABLE EMP03 MODIFY (JOB VARCHAR2(4000));
-- (3) 필드 삭제(DROP)
ALTER TABLE EMP03 DROP COLUMN JOB; -- NULL인 필드 삭제
SELECT * FROM EMP03;
ALTER TABLE EMP03 DROP COLUMN DEPTNO; -- DEPTNO필드 삭제시 데이터까지 제거
-- 논리적으로 특정 필드를 접근 못하도록 (낮)
ALTER TABLE EMP03 SET UNUSED (COMM); -- COMM 접근불가
-- 논리적으로 접근 불가했던 필드를 물리적으로 삭제 (새벽)
ALTER TABLE EMP03 DROP UNUSED COLUMNS;

-- 3. 테이블 삭제 (DROP TABLE)
DROP TABLE EMP01;
SELECT * FROM EMP01;
SELECT * FROM DEPT;
DROP TABLE DEPT; -- 다른 테이블에서 참조하는 데이터가 있을 경우 DROP 불가

-- 4. 테이블의 모든 행을 제거 (TRUNCATE)
SELECT * FROM EMP03;
TRUNCATE TABLE EMP03; -- EMP03안의 데이터 제거(취소불가)
SELECT * FROM EMP03;

-- 5. 테이블명 변경(RENAME)
SELECT * FROM EMP02;
RENAME EMP02 TO EMP2; -- EMP02를 EMP2로 테이블명 변경
SELECT * FROM EMP2;

-- 6. 데이터 딕셔너리(접근불가) VS. 데이터 딕셔너리 뷰(사용자 접근용)
-- 종류 
-- USER_XXX : 현 계정이 소유하고 있는 객체(테이블, 인덱스, 제약조건, 뷰)
    -- USER_TABLES, USER_INDEXES, USER_CONSTRAINTS, USER_VIEWS
-- ALL_XXX  : 현 계정이 접근 가능한 객체
    -- ALL_TABLES, ALL_INDEXES, ALL_CONSTRAINTS, ALL_VIEWS
-- DBA_XXX : DBA만 접근가능. DBMS의 모든 객체
    -- DBA_TABLES, DBA_INDEXES, DBA_CONSTRAINTS, DBA_VIEWS
SHOW USER;
SELECT * FROM USER_TABLES; -- 내 계정이 소유한 테이블 객체
SELECT * FROM USER_INDEXES; -- 내 계정이 소유한 인덱스 객체
SELECT * FROM USER_CONSTRAINTS; -- 내계정이 소유한 제약조건들
SELECT * FROM USER_VIEWS;   -- 내계정이 소유한 뷰
SELECT * FROM ALL_TABLES; -- 내 계정이 접근 가능한 테이블 객체
SELECT * FROM ALL_TABLES WHERE TABLE_NAME='EMP';
SELECT * FROM ALL_INDEXES;
SELECT * FROM ALL_CONSTRAINTS;
SELECT * FROM ALL_VIEWS;
SELECT * FROM DBA_TABLES; -- DBA권한일 경우만 가능
SELECT * FROM DBA_INDEXES;

-- ★ ★ DCL(사용자 계정생성, 사용자권한부여, 권한박탈, 사용자계정삭제)
CREATE USER joeun IDENTIFIED BY tiger; -- joeun 계정 생성
-- 권한 부여(세션권한, scott.emp, scott.dept에 대한 모든 권한)
GRANT CREATE SESSION TO joeun;
GRANT ALL ON EMP TO joeun; -- 내계정의 emp테이블에 대한 모든 권한 부여
GRANT SELECT ON DEPT TO joeun; -- 내계정의 dept테이블에 대한 selete 권한 부여
SHOW USER;
-- 권한박탈(권한박탈할 ID가 접속해제 중)
REVOKE ALL ON EMP FROM joeun; -- 내계정의 emp 테이블에 대한 모든 권한 박탈
REVOKE ALL ON DEPT FROM joeun;
-- 사용자 계정 삭제(접속 중 계정삭제 불가)
DROP USER joeun CASCADE;

-- ★ ★ DML(SELECT, INSERT, UPDATE,  DELETE) ★ ★
--1. INSERT INTO 테이블명 VALUES (값1, 값2, ...);
--   INSERT INTO 테이블명 (필드명1, 필드명2,...) VALUES (값1, 값2, ..);
SELECT * FROM DEPT01;
INSERT INTO DEPT01 VALUES (50, 'ACCOUNTING','NEW YORK');
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (60, 'SALES','BOSTON');
INSERT INTO DEPT01 (DNAME, LOC, DEPTNO) VALUES ('IT',NULL,70);-- 명시적으로 NULL추가
INSERT INTO DEPT01 (DEPTNO, DNAME) VALUES (80, 'OPERATION'); -- 묵시적으로 NULL추가
SELECT * FROM DEPT01;
-- 서브쿼리를 이용한 INSERT 
  -- DEPT테이블에서 10~30번 부서를 INSERT
  DESC DEPT01;
TRUNCATE TABLE DEPT01;
INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO<40;
SELECT * FROM DEPT01;
-- BOOK테이블에서 11(책번호)번, '스포츠의학','한솔출판', 출판일은 오늘, 가격은 90000.
DESC BOOK;
SELECT * FROM BOOK;
INSERT INTO BOOK (BOOKID, BOOKNAME, PUBLISHER, RDATE, PRICE)
  VALUES (11, '스포츠의학','한솔출판', SYSDATE, 90000);
INSERT INTO BOOK VALUES (12, '스포츠의학','한솔출판', SYSDATE, 90000);

-- 트랜젝션 명령어(DML명령어만)
COMMIT; -- 트랜젝션 단위로 진행. 현 트랜잭션의 작업을 DB에 반영
ROLLBACK; 

-- PDF 2PT. 연습문제
DROP TABLE SAM01;
CREATE TABLE SAM01(
    EMPNO NUMBER(4) CONSTRAINT SAM_PK PRIMARY KEY,
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    SAL NUMBER(7,2));
SELECT * FROM USER_CONSTRAINTS;

DROP TABLE SAM01;
CREATE TABLE SAM01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    SAL NUMBER(7,2),
    PRIMARY KEY(EMPNO));
SELECT * FROM SAM01;
INSERT INTO SAM01 (EMPNO, ENAME, JOB, SAL) 
    VALUES (1000,'APPLE','POLICE',10000);
INSERT INTO SAM01 VALUES (1010,'BANANA','NURSE',15000);
INSERT INTO SAM01 VALUES (1020,'ORANGE','DOCTOR',25000);
INSERT INTO SAM01 (EMPNO, ENAME, SAL) VALUES (1030,'VERY',25000);
INSERT INTO SAM01 VALUES (1040,'CAT',NULL, 2000);
INSERT INTO SAM01 
    SELECT EMPNO, ENAME, JOB, SAL FROM EMP WHERE DEPTNO=10;
SELECT * FROM SAM01;
-- 2. UPDATE 테이블명 SET 필드명1=값1[, 필드명2=값2,...] [WHERE  조건];
DROP TABLE EMP01;
CREATE TABLE EMP01 AS SELECT * FROM EMP;
-- 부서번호를 30으로 수정
UPDATE EMP01 SET DEPTNO=30;
ROLLBACK; -- 트랜젝션 취소
SELECT * FROM EMP01;
-- 모든 직원의 급여를 10%씩 인상하시오.
UPDATE EMP01 SET SAL = SAL*1.1;
SELECT * FROM EMP01;
-- 10번 부서 직원의 입사일을 오늘로, 부서번호는 30번 부서로 수정하시오.
UPDATE EMP01 SET HIREDATE=SYSDATE, DEPTNO=30 WHERE DEPTNO=10;
SELECT * FROM EMP01;
-- SAL이 3000이상인 사원만 급여(SAL)를 10%인상
UPDATE EMP01 SET SAL=SAL*1.1 WHERE SAL>=3000;
-- 'DALLAS'에 근무하는 직원의 급여를 1000$씩 인상(서브쿼리)
UPDATE EMP01 SET SAL = SAL+1000
  WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS');
-- SCOTT 의 부서번호는 20으로, JOB은 MANAGER, SAL과 COMM을 500씩 인상, 상사는 KING으로 수정
UPDATE EMP01 SET DEPTNO=20,
                JOB='MANAGER',
                SAL = SAL + 500,
                COMM = NVL(COMM, 0) +500,
                MGR = (SELECT EMPNO FROM EMP WHERE ENAME='KING')
          WHERE ENAME='SCOTT'; -- 서브쿼리를 이용한 UPDATE
SELECT * FROM EMP01 WHERE ENAME='SCOTT';
-- DEPT01에서 20부터의 지역명을 60번 부터의 지역명으로 변경 (서브쿼리이용)
UPDATE DEPT01 SET LOC=(SELECT LOC FROM DEPT WHERE DEPTNO=60)
  WHERE DEPTNO=20; -- DEPT테이블에 60번 부서가 없어서 NULL로 수정
UPDATE DEPT01 SET LOC=(SELECT LOC FROM DEPT01 WHERE DEPTNO=60)
  WHERE DEPTNO=20;
SELECT * FROM DEPT01;
-- EMP01테이블의 모든 사원의 급여와 입사일을 'KING'의 급여와 입사일로 수정
UPDATE EMP01 SET SAL=(SELECT SAL FROM EMP01 WHERE ENAME='KING'),
                HIREDATE=(SELECT HIREDATE FROM EMP01 WHERE ENAME='KING');
UPDATE EMP01 SET 
  (SAL, HIREDATE) = (SELECT SAL, HIREDATE FROM EMP01 WHERE ENAME='KING');
COMMIT;
-- 3. DELETE FROM 테이블명 WHERE 조건;
SELECT * FROM EMP01;
DELETE FROM EMP01;
ROLLBACK; -- DML 취소 가능
-- EMP01테블에서 30부서 직원만 삭제
DELETE FROM EMP01 WHERE DEPTNO=30;
SELECT * FROM EMP01;
-- EMP01테이블에서 사원명이 'FORD'인 사우너을 삭제
DELETE FROM EMP01 WHERE ENAME='FORD';
SELECT * FROM EMP01;
-- SAM01테이블에서 JOB이 정해지지 않는 사원을 삭제
DELETE FROM SAM01 WHERE JOB IS NULL;
-- EMP01테이블에서 부서명(DNAME)이 SALES인 사원을 삭제(서브쿼리 이용)
DELETE FROM EMP01
  WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
-- EMP01테이블에서 RESEARCH 부서 소속인 사원을 삭제(서브쿼리)
DELETE FROM EMP01
  WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH');
COMMIT;

-- 연습문제 PDT PT.1
-- 1. 테이블생성
DROP TABLE MY_DATA;
CREATE TABLE MY_DATA(
    ID NUMBER(4),
    NAME VARCHAR2(10),
    USERID VARCHAR2(30),
    SALARY NUMBER(10,2),
    PRIMARY KEY(ID));
-- 2. 데이터 입력
INSERT INTO MY_DATA (ID, NAME, USERID, SALARY)
  VALUES (1, INITCAP('SCOTT'), 'sscott',10000.00);
INSERT INTO MY_DATA VALUES (2, 'Ford', 'fford',13000.00);
INSERT INTO MY_DATA 
  VALUES (3, 'Patel', 'ppatel',TO_NUMBER('33,000.00','99,999.99'));
INSERT INTO MY_DATA 
  VALUES (4,'Report','rreport',TO_NUMBER('23,500.00','00,000.00'));
INSERT INTO MY_DATA 
  VALUES (5, 'Good', 'ggood',44450.00);
-- 3. 입력한 자료 확인
SELECT * FROM MY_DATA;
SELECT ID, NAME, USERID, TO_CHAR(SALARY, '99,999.00') SALARY
    FROM MY_DATA;
-- 4. 트랜젝션 작업 반영
COMMIT;
-- 6.
UPDATE MY_DATA SET SALARY=65000.00 WHERE ID=3;
UPDATE MY_DATA SET SALARY=TO_NUMBER('65,000.00','99,999.99') 
    WHERE ID=3;
COMMIT;
-- 7. Ford 직원 삭제
DELETE FROM MY_DATA WHERE NAME='Ford';
DELETE FROM MY_DATA WHERE INITCAP(NAME)='Ford';
COMMIT;
-- 8. 
UPDATE MY_DATA SET SALARY = 15000
    WHERE SALARY <= 15000;
-- 9.
DROP TABLE MY_DATA;
-- cf. Report의 salary를 Ford의 salary값으로 수정
UPDATE MY_DATA SET SALARY=(SELECT SALARY FROM MY_DATA WHERE NAME='Ford')
  WHERE NAME='Report';
  
-- ★ ★ 제약조건
-- (1) PRIMARY KEY : 유일하게 테이블의 각 행을 식별
-- (2) NOT NULL    : NULL값을 포함하지 않음
-- (3) UNIQUE  : 모든 행에 대해 유일해야. NULL값을 허용
-- (4) FOREIGN KEY : 테이블의 열은 다른 테이블의 열을 참조
-- (5) CHECK(조건) : 해당 조건이 만족.
-- (6) DEFAULT : 기본값 설정 (해당 열의 데이터 입력이 없으면 NULL)
CREATE TABLE DEPT1(
  DEPTNO NUMBER(2) PRIMARY KEY,
  DNAME  VARCHAR2(14) UNIQUE,
  LOC    VARCHAR2(13) NOT NULL
);
DROP TABLE DEPT1;
CREATE TABLE DEPT1(
  DEPTNO NUMBER(2),
  DNAME VARCHAR2(14),
  LOC VARCHAR2(13) NOT NULL,
  PRIMARY KEY(DEPTNO),
  UNIQUE(DNAME));
CREATE TABLE EMP1(
  EMPNO NUMBER(4) PRIMARY KEY,
  ENAME VARCHAR2(10) NOT NULL,
  JOB   VARCHAR2(9)  NOT NULL,
  MGR   NUMBER(4),
  HIREDATE DATE DEFAULT SYSDATE,
  SAL   NUMBER(7,2) CHECK (SAL>0),
  COMM  NUMBER(7,2),
  DEPTNO NUMBER(2) REFERENCES DEPT1(DEPTNO) );
DROP TABLE EMP1;
CREATE TABLE EMP1(
  EMPNO NUMBER(4),
  ENAME VARCHAR2(10) NOT NULL,
  JOB   VARCHAR2(9) NOT NULL,
  MGR   NUMBER(4),
  HIREDATE DATE DEFAULT SYSDATE,
  SAL   NUMBER(7,2),
  COMM  NUMBER(7,2),
  DEPTNO NUMBER(2),
  PRIMARY KEY(EMPNO),
  CHECK(SAL>0),
  FOREIGN KEY(DEPTNO) REFERENCES DEPT1(DEPTNO));
INSERT INTO DEPT1 SELECT * FROM DEPT;
SELECT * FROM DEPT1;
INSERT INTO DEPT1 (DEPTNO, DNAME, LOC)
  VALUES (50,'IT','MAPO');
INSERT INTO DEPT1 (DEPTNO, DNAME, LOC)
  VALUES (60,'PLANNING','MAPO');
-- EMP PK, NOT NULL(ENAME, JOB), DEFAULT, CHECK
INSERT INTO EMP1 (EMPNO, ENAME, JOB, SAL, COMM, DEPTNO)
  VALUES (1001, 'KIM','MANAGER',9000,9000,50); -- DEFAULT SYSDATE
SELECT * FROM EMP1;
INSERT INTO EMP1 (EMPNO, ENAME, JOB, DEPTNO)
  VALUES (1002, 'PARK','MANAGER',60); -- PK 제약조건
INSERT INTO EMP1 (EMPNO, JOB, DEPTNO) VALUES (1003, 'MANAGER',40); -- NOT NULL 제약조건
INSERT INTO EMP1 (EMPNO, ENAME, JOB, SAL, DEPTNO)
  VALUES (1004, 'YUN', 'MANAGER', 0, 30); -- CHECK 제약조건
SELECT * FROM DEPT1;
INSERT INTO EMP1 (EMPNO, ENAME, JOB, DEPTNO) 
  VALUES (1005, 'YI','MANAGER',80);--외래키 제약조건
  
-- BOOK & BOOKCATEGORY
DROP TABLE BOOK;
DROP TABLE BOOKCATEGORY;
DROP TABLE BOOKCATEGORY CASCADE CONSTRAINTS; -- 참조하는 테이블과 상관없이 DROP

CREATE TABLE BOOKCATEGORY(
    categoryCODE NUMBER(3),
    categoryName VARCHAR2(20),
    OFFICE_LOC VARCHAR2(50) NOT NULL,
    PRIMARY KEY(categoryCODE),
    UNIQUE(categoryName));
    
CREATE TABLE BOOKCATEGORY(
    categoryCODE NUMBER(3) PRIMARY KEY,
    categoryName VARCHAR2(20) UNIQUE,
    OFFICE_LOC VARCHAR2(50) NOT NULL);
    
INSERT INTO BOOKCATEGORY VALUES (100, '철학','3층 인문실');
INSERT INTO BOOKCATEGORY VALUES (200, '인문','3층 인문실');
INSERT INTO BOOKCATEGORY VALUES (300, '자연과학','3층 과학실');
INSERT INTO BOOKCATEGORY VALUES (400, 'IT','4층 과학실');
SELECT * FROM BOOKCATEGORY;

CREATE TABLE BOOK(
  categoryCODE NUMBER(3) NOT NULL,
  bookNO VARCHAR2(20),
  bookNAME VARCHAR2(100),
  PUBLISHER VARCHAR2(100),
  PUBYEAR NUMBER(4) DEFAULT EXTRACT(YEAR FROM SYSDATE),
  PRIMARY KEY(BOOKNO),
  FOREIGN KEY(categoryCODE) REFERENCES BOOKCATEGORY(categoryCODE));
CREATE TABLE BOOK(
  categoryCODE NUMBER(3) REFERENCES BOOKCATEGORY(categoryCODE) NOT NULL,
  BOOKNO VARCHAR2(20) PRIMARY KEY,
  BOOKNAME VARCHAR2(100),
  PUBLISHER VARCHAR2(100),
  PUBYEAR NUMBER(4) DEFAULT TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) );
  
INSERT INTO BOOK (categoryCODE,BOOKNO,  BOOKNAME, PUBLISHER)
  VALUES (100,'100A01','철학자의 삶','더존출판');
INSERT INTO BOOK VALUES (400,'400A01','이것은 DB다','더존출판',2018);
INSERT INTO BOOK VALUES (900,'400A02','이것은 DB다','더존출판',2018); --외래키 참조 에러
INSERT INTO BOOK VALUES (NULL, '400B02','아무책','아무출판',2020);
SELECT * FROM BOOK;
SELECT B.*, categoryNAME, OFFICE_LOC
  FROM BOOK B, BOOKCATEGORY C
  WHERE B.categoryCODE = C.categoryCODE;

-- MAJOR & STUDENT
DROP TABLE STUDENT;
DROP TABLE MAJOR;
CREATE TABLE MAJOR(
    MAJOR_CODE NUMBER(2) PRIMARY KEY,
    MAJOR_NAME VARCHAR2(50) UNIQUE,
    MAJOR_OFFICE_LOC VARCHAR2(255) NOT NULL);
CREATE TABLE STUDENT(
    STUDENT_CODE VARCHAR2(10) PRIMARY KEY,
    STUDENT_NAME VARCHAR2(50) NOT NULL,
    SCORE NUMBER(3) CHECK (SCORE BETWEEN 0 AND 100),
    MAJOR_CODE NUMBER(2) REFERENCES MAJOR(MAJOR_CODE) );
DROP TABLE STUDENT;
DROP TABLE MAJOR;
CREATE TABLE MAJOR(
    MAJOR_CODE NUMBER(2),
    MAJOR_NAME VARCHAR2(50),
    MAJOR_OFFICE_LOC VARCHAR2(255) NOT NULL,
    PRIMARY KEY(MAJOR_CODE),
    UNIQUE(MAJOR_NAME));
CREATE TABLE STUDENT(
    STUDENT_CODE VARCHAR2(10),
    STUDENT_NAME VARCHAR2(50) NOT NULL,
    SCORE NUMBER(3),
    MAJOR_CODE NUMBER(2),
    PRIMARY KEY(STUDENT_CODE),
    CHECK (SCORE>=0 AND SCORE<=100),
    FOREIGN KEY(MAJOR_CODE) REFERENCES MAJOR(MAJOR_CODE));
INSERT INTO MAJOR VALUES (1, '경영정보','경영관 305호');
INSERT INTO MAJOR VALUES (2, '소프트웨어공학','정보관 808호');
INSERT INTO MAJOR VALUES (3, '디자인','예술관 606호');
INSERT INTO MAJOR VALUES (4, '경제','경상관 202호');
SELECT * FROM MAJOR;
INSERT INTO STUDENT VALUES ('A01','김길동',100, 1);
INSERT INTO STUDENT VALUES ('A02','문길동',90, 2);
INSERT INTO STUDENT VALUES ('A03','홍길동',95, 3);
INSERT INTO STUDENT VALUES ('B03','신길동',-9, 3); -- CHECK 제약조건
INSERT INTO STUDENT VALUES (NULL,'신길동',90, 3);  -- PRIMARY KEY 제약조건=(NOT NULL+UNIQUE)
SELECT S.*, MAJOR_NAME FROM STUDENT S, MAJOR M WHERE S.MAJOR_CODE=M.MAJOR_CODE;

